// Code generated by repogen. DO NOT EDIT.
package repository

import (
	"database/sql"
	"time"
)

var (
	_ = time.UTC
)

const LocationCalc_CreateTableStm = `CREATE TABLE "location_calc" (
	name STRING PRIMARY KEY,
	min_points INTEGER,
	cluster_radius FLOAT,
	tweet_filter STRING
)`
const LocationCalc_InsertStm = `
INSERT INTO location_calc (
	name,
	min_points,
	cluster_radius,
	tweet_filter
) VALUES (
	?,
	?,
	?,
	?
)
`

func (r *LocationCalc) MarshalRow() []interface{} {
	return []interface{}{
		r.Name,
		r.MinPoints,
		r.ClusterRadius,
		r.TweetFilter,
	}
}
func (r *LocationCalc) UnmarshalRow(row interface{ Scan(...interface{}) error }) error {
	return row.Scan(
		&r.Name,
		&r.MinPoints,
		&r.ClusterRadius,
		&r.TweetFilter,
	)
}

type LocationCalcRepo struct {
	DB *sql.DB
}

func (r *LocationCalcRepo) CreateTable() error {
	if _, err := r.DB.Exec(LocationCalc_CreateTableStm); err != nil {
		return err
	}
	return nil
}
func (r *LocationCalcRepo) InsertMany(rs []*LocationCalc) error {
	tx, err := r.DB.Begin()
	if err != nil {
		return err
	}
	stm, err := tx.Prepare(LocationCalc_InsertStm)
	if err != nil {
		return err
	}
	defer stm.Close()
	for _, r := range rs {
		if _, err := stm.Exec(r.MarshalRow()...); err != nil {
			return err
		}
	}
	if err := tx.Commit(); err != nil {
		return err
	}
	return nil
}
func (r *LocationCalcRepo) Get(name string) (*LocationCalc, error) {
	row := r.DB.QueryRow("SELECT * FROM location_calc WHERE name = ?", name)
	var res LocationCalc
	if err := res.UnmarshalRow(row); err != nil {
		return nil, err
	}
	return &res, nil
}
func (r *LocationCalcRepo) List(where string, args ...interface{}) ([]*LocationCalc, error) {
	q := "SELECT * FROM location_calc"
	if where != "" {
		q += " WHERE " + where
	}
	rows, err := r.DB.Query(q, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var ress []*LocationCalc
	for rows.Next() {
		var res LocationCalc
		if err := res.UnmarshalRow(rows); err != nil {
			return nil, err
		}
		ress = append(ress, &res)
	}
	return ress, nil
}
