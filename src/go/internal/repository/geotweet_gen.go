// Code generated by repogen. DO NOT EDIT.
package repository

import (
	"database/sql"
	"time"
)

var (
	_ = time.UTC
)

const GeoTweet_CreateTableStm = `CREATE TABLE "geo_tweet" (
	tweet_id INTEGER,
	user_id INTEGER,
	created_at TIMESTAMP,
	latitude FLOAT,
	longitude FLOAT,
	month INTEGER,
	weekday INTEGER,
	hour_of_day INTEGER,
	time_zone STRING
)`
const GeoTweet_InsertStm = `
INSERT INTO geo_tweet (
	tweet_id,
	user_id,
	created_at,
	latitude,
	longitude,
	month,
	weekday,
	hour_of_day,
	time_zone
) VALUES (
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)
`

func (r *GeoTweet) MarshalRow() []interface{} {
	return []interface{}{
		r.TweetID,
		r.UserID,
		r.CreatedAt,
		r.Latitude,
		r.Longitude,
		r.Month,
		r.Weekday,
		r.HourOfDay,
		r.TimeZone,
	}
}
func (r *GeoTweet) UnmarshalRow(row interface{ Scan(...interface{}) error }) error {
	return row.Scan(
		&r.TweetID,
		&r.UserID,
		&r.CreatedAt,
		&r.Latitude,
		&r.Longitude,
		&r.Month,
		&r.Weekday,
		&r.HourOfDay,
		&r.TimeZone,
	)
}

type GeoTweetRepo struct {
	DB *sql.DB
}

func (r *GeoTweetRepo) CreateTable() error {
	if _, err := r.DB.Exec(GeoTweet_CreateTableStm); err != nil {
		return err
	}
	return nil
}
func (r *GeoTweetRepo) InsertMany(rs []*GeoTweet) error {
	tx, err := r.DB.Begin()
	if err != nil {
		return err
	}
	stm, err := tx.Prepare(GeoTweet_InsertStm)
	if err != nil {
		return err
	}
	defer stm.Close()
	for _, r := range rs {
		if _, err := stm.Exec(r.MarshalRow()...); err != nil {
			return err
		}
	}
	if err := tx.Commit(); err != nil {
		return err
	}
	return nil
}
func (r *GeoTweetRepo) List(where string, args ...interface{}) ([]*GeoTweet, error) {
	q := "SELECT * FROM geo_tweet"
	if where != "" {
		q += " WHERE " + where
	}
	rows, err := r.DB.Query(q, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var ress []*GeoTweet
	for rows.Next() {
		var res GeoTweet
		if err := res.UnmarshalRow(rows); err != nil {
			return nil, err
		}
		ress = append(ress, &res)
	}
	return ress, nil
}
