// Code generated by repogen. DO NOT EDIT.
package repository

import (
	"database/sql"
	"time"
)

var (
	_ = time.UTC
)

const Profile_CreateTableStm = `CREATE TABLE "profile" (
	id INTEGER,
	user_id INTEGER,
	created_at TIMESTAMP,
	language STRING,
	utc_offset INTEGER,
	timezone STRING
)`
const Profile_InsertStm = `
INSERT INTO profile (
	id,
	user_id,
	created_at,
	language,
	utc_offset,
	timezone
) VALUES (
	?,
	?,
	?,
	?,
	?,
	?
)
`

func (r *Profile) MarshalRow() []interface{} {
	return []interface{}{
		r.ID,
		r.UserID,
		r.CreatedAt,
		r.Language,
		r.UTCOffset,
		r.Timezone,
	}
}
func (r *Profile) UnmarshalRow(row interface{ Scan(...interface{}) error }) error {
	return row.Scan(
		&r.ID,
		&r.UserID,
		&r.CreatedAt,
		&r.Language,
		&r.UTCOffset,
		&r.Timezone,
	)
}

type ProfileRepo struct {
	DB *sql.DB
}

func (r *ProfileRepo) CreateTable() error {
	if _, err := r.DB.Exec(Profile_CreateTableStm); err != nil {
		return err
	}
	return nil
}
func (r *ProfileRepo) InsertMany(rs []*Profile) error {
	tx, err := r.DB.Begin()
	if err != nil {
		return err
	}
	stm, err := tx.Prepare(Profile_InsertStm)
	if err != nil {
		return err
	}
	defer stm.Close()
	for _, r := range rs {
		if _, err := stm.Exec(r.MarshalRow()...); err != nil {
			return err
		}
	}
	if err := tx.Commit(); err != nil {
		return err
	}
	return nil
}
func (r *ProfileRepo) List(where string, args ...interface{}) ([]*Profile, error) {
	q := "SELECT * FROM profile"
	if where != "" {
		q += " WHERE " + where
	}
	rows, err := r.DB.Query(q, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var ress []*Profile
	for rows.Next() {
		var res Profile
		if err := res.UnmarshalRow(rows); err != nil {
			return nil, err
		}
		ress = append(ress, &res)
	}
	return ress, nil
}
