// Code generated by repogen. DO NOT EDIT.
package repository

import (
	"database/sql"
	"time"
)

var (
	_ = time.UTC
)

const Location_CreateTableStm = `CREATE TABLE "location" (
	calc_name STRING,
	user_id INTEGER,
	type STRING,
	latitude FLOAT,
	longitude FLOAT,
	count INTEGER,
	percentage_total FLOAT,
	percentage_next FLOAT,
	radius_kilometers FLOAT
)`
const Location_CreateIndexStm_calc = "CREATE INDEX calc ON location(calc_name, user_id)"
const Location_InsertStm = `
INSERT INTO location (
	calc_name,
	user_id,
	type,
	latitude,
	longitude,
	count,
	percentage_total,
	percentage_next,
	radius_kilometers
) VALUES (
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)
`

func (r *Location) MarshalRow() []interface{} {
	return []interface{}{
		r.CalcName,
		r.UserID,
		r.Type,
		r.Latitude,
		r.Longitude,
		r.Count,
		r.PercentageTotal,
		r.PercentageNext,
		r.RadiusKilometers,
	}
}
func (r *Location) UnmarshalRow(row interface{ Scan(...interface{}) error }) error {
	return row.Scan(
		&r.CalcName,
		&r.UserID,
		&r.Type,
		&r.Latitude,
		&r.Longitude,
		&r.Count,
		&r.PercentageTotal,
		&r.PercentageNext,
		&r.RadiusKilometers,
	)
}

type LocationRepo struct {
	DB *sql.DB
}

func (r *LocationRepo) CreateTable() error {
	if _, err := r.DB.Exec(Location_CreateTableStm); err != nil {
		return err
	}
	if _, err := r.DB.Exec(Location_CreateIndexStm_calc); err != nil {
		return err
	}
	return nil
}
func (r *LocationRepo) InsertMany(rs []*Location) error {
	tx, err := r.DB.Begin()
	if err != nil {
		return err
	}
	stm, err := tx.Prepare(Location_InsertStm)
	if err != nil {
		return err
	}
	defer stm.Close()
	for _, r := range rs {
		if _, err := stm.Exec(r.MarshalRow()...); err != nil {
			return err
		}
	}
	if err := tx.Commit(); err != nil {
		return err
	}
	return nil
}
func (r *LocationRepo) List(where string, args ...interface{}) ([]*Location, error) {
	q := "SELECT * FROM location"
	if where != "" {
		q += " WHERE " + where
	}
	rows, err := r.DB.Query(q, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var ress []*Location
	for rows.Next() {
		var res Location
		if err := res.UnmarshalRow(rows); err != nil {
			return nil, err
		}
		ress = append(ress, &res)
	}
	return ress, nil
}
func (r *LocationRepo) ListCalc(calc_name string, user_id int) ([]*Location, error) {
	rows, err := r.DB.Query("SELECT * FROM location WHERE calc_name=? AND user_id=?", calc_name, user_id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var ress []*Location
	for rows.Next() {
		var res Location
		if err := res.UnmarshalRow(rows); err != nil {
			return nil, err
		}
		ress = append(ress, &res)
	}
	return ress, nil
}
